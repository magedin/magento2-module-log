<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2022 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\Logger;

use Magento\Framework\Filesystem\DirectoryList;

class Logger
{
    /**
     * @var null
     */
    protected $filename = null;

    /**
     * @var Model\Logger
     */
    private $logger;

    /**
     * @var Model\HandlerFactory
     */
    private $handlerFactory;

    /**
     * @var DirectoryList
     */
    private $directoryList;

    public function __construct(
        Model\HandlerFactory $handlerFactory,
        Model\Logger $logger,
        DirectoryList $directoryList,
        $filename = null
    ) {
        $this->logger = $logger;
        $this->handlerFactory = $handlerFactory;
        $this->directoryList = $directoryList;
        $this->filename = $filename;
    }

    /**
     * @param $level
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function log($level, $message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->log($level, $message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function debug($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->debug($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function info($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->info($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function warn($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->warn($message, $context);
    }

    /**
     * @param string $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function warning(string $message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->warning($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function err($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->err($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function error($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->error($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function crit($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->crit($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function critical($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->critical($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function alert($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->alert($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function emerg($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->emerg($message, $context);
    }

    /**
     * @param $message
     * @param array $context
     * @param string|null $file
     * @return bool
     */
    public function emergency($message, array $context = [], string $file = null)
    {
        $this->prepareLogger($file);
        return $this->logger->emergency($message, $context);
    }

    /**
     * @param string|null $file
     * @return void
     */
    private function prepareLogger(string $file = null)
    {
        try {
            $handler = $this->handlerFactory->create([
                'filePath' => $this->directoryList->getPath('log') . DS,
                'fileName' => $file ?? $this->filename,
            ]);
            $this->logger->setHandlers([$handler]);
        } catch (\Exception $e) {
            $this->logger->critical($e);
        }
    }
}
